{"ast":null,"code":"var _jsxFileName = \"/Users/paloma/Desktop/1_vidly/src/components/movies.js\";\nimport React, { Component } from 'react';\nimport { getMovies } from '../services/fakeMovieService';\nimport Pagination from './common/pagination';\nimport { paginate } from '../utils/paginate';\nimport ListGroup from './common/listGroup';\nimport { getGenres } from '../services/fakeGenreService';\nimport MoviesTable from './moviesTable';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport SearchBox from './searchBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      searchQuery: \"\",\n      selectedGenre: null,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        pageSize,\n        currentPage,\n        sortColumn,\n        selectedGenre,\n        searchQuery,\n        movies: allMovies\n      } = this.state;\n      let filtered = allMovies;\n      if (searchQuery) filtered = allMovies.filter(m => m.title.toLowerCase().startsWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      _id: '',\n      name: 'All Genres'\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      sortColumn\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no movies in the database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 33\n    }, this);\n    const {\n      totalCount,\n      data: movies\n    } = this.getPageData();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          items: this.state.genres,\n          selectedItem: this.state.selectedGenre,\n          onItemSelect: this.handleGenreSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/movies/new\",\n          className: \"btn btn-primary\",\n          style: {\n            marginBottom: 20\n          },\n          children: \"New Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Showing \", totalCount, \" movies in the database\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n          value: searchQuery,\n          onChange: this.handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n          movies: movies,\n          onDelete: this.handleDelete,\n          onSort: this.handleSort,\n          sortColumn: sortColumn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          itemsCount: totalCount,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          onPageChange: this.handlePageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/paloma/Desktop/1_vidly/src/components/movies.js"],"names":["React","Component","getMovies","Pagination","paginate","ListGroup","getGenres","MoviesTable","_","Link","SearchBox","Movies","state","movies","genres","currentPage","pageSize","searchQuery","selectedGenre","sortColumn","path","order","handleDelete","movie","filter","m","_id","setState","handlePageChange","page","handleGenreSelect","genre","handleSort","handleSearch","query","getPagedData","allMovies","filtered","title","toLowerCase","startsWith","sorted","orderBy","totalCount","length","data","componentDidMount","name","render","count","getPageData","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {getMovies} from '../services/fakeMovieService';\nimport Pagination from './common/pagination';\nimport {paginate} from '../utils/paginate';\nimport ListGroup from './common/listGroup';\nimport { getGenres } from '../services/fakeGenreService';\nimport MoviesTable from './moviesTable';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport SearchBox from './searchBox';\n\nclass Movies extends Component {\n    state = {\n        movies: [],\n        genres: [],\n        currentPage: 1,\n        pageSize: 4,\n        searchQuery: \"\",\n        selectedGenre: null,\n        sortColumn: { path: \"title\", order: \"asc\" }\n    };\n\n    componentDidMount() {\n        const genres = [{_id: '', name: 'All Genres'}, ...getGenres()]\n\n        this.setState({movies: getMovies(), genres});\n    }\n\n    handleDelete = (movie) => {\n        const movies = this.state.movies.filter(m => m._id !== movie._id);\n        this.setState({movies});\n    }\n\n    handlePageChange = page => {\n        this.setState({currentPage: page});\n    }\n\n    handleGenreSelect = genre => {\n        this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n    };\n\n    handleSort = sortColumn => {\n        this.setState({sortColumn});\n    }\n\n    handleSearch = query => {\n        this.setState({searchQuery: query, selectedGenre: null, currentPage: 1});\n    }\n\n    handleSort = sortColumn => {\n        this.setState({sortColumn});\n    }\n\n    getPagedData = () => {\n        const {\n          pageSize,\n          currentPage,\n          sortColumn,\n          selectedGenre,\n          searchQuery,\n          movies: allMovies\n        } = this.state;\n    \n        let filtered = allMovies;\n        if (searchQuery)\n          filtered = allMovies.filter(m =>\n            m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\n          );\n        else if (selectedGenre && selectedGenre._id)\n          filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n    \n        const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    \n        const movies = paginate(sorted, currentPage, pageSize);\n    \n        return { totalCount: filtered.length, data: movies };\n      };\n\n    render() { \n        const {length: count} = this.state.movies;\n        const {pageSize, currentPage, sortColumn} = this.state;\n\n        if (count === 0) return <p>There are no movies in the database</p>;\n\n        const {totalCount, data: movies} = this.getPageData();\n\n        return ( \n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <ListGroup \n                        items={this.state.genres} \n                        selectedItem={this.state.selectedGenre}\n                        onItemSelect={this.handleGenreSelect}\n                    />\n                </div>\n                <div className=\"col\">\n                    <Link\n                        to=\"/movies/new\"\n                        className=\"btn btn-primary\"\n                        style={{marginBottom: 20}}\n                    >New Movie</Link>\n                    <p>Showing {totalCount} movies in the database</p>\n                    <SearchBox value={searchQuery} onChange={this.handleSearch} />\n                    <MoviesTable \n                        movies={movies} \n                        onDelete={this.handleDelete}\n                        onSort={this.handleSort}    \n                        sortColumn={sortColumn}\n                    />\n                    <Pagination \n                        itemsCount={totalCount} \n                        pageSize={pageSize} \n                        currentPage={currentPage}\n                        onPageChange={this.handlePageChange}/>\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default Movies;"]},"metadata":{},"sourceType":"module"}